#! winxed
// Test file for winxedxx supported features
// All features used here should at least compile

//**********************************************************************

// Minimalistic TAP functions

function ok(int check, string message)
{
    print("ok ");
    if (check)
        print("1");
    else
        print("0");
    say(" - ", message);
}

function is(int value, int check, string message)
{
    print("ok ");
    if (value == check)
        print("1");
    else
        print("0");
    say(" - ", message);
}

function is_string(string value, string check, string message)
{
    print("ok ");
    if (value == check)
        print("1");
    else
        print("0");
    say(" - ", message);
}

//**********************************************************************

function array()
{
    var arr = [ "a", "b", "c", "d" ];
    is(elements(arr), 4, "array literal");
    is_string(arr[2], "c", "array element initialized");
}

namespace Foo
{

function bar()
{
    return "Foo.bar";
}

} // namespace Foo

function bar()
{
    return "bar";
}

function test_switchcase()
{
    int i = 42;
    int result = 0;
    switch {
      case i == 42:
        result = 1;
        break;
      default:
        // Make sure the previous break skip this
        result = 0;
    }
    is(result, 1, "switchcase");
}

//**********************************************************************

function main [main] (args)
{
    ok(1, "compiled and started");

    // No debug mode yet, just ensure this can be compiled
    __ASSERT__(1 == 1);

    int i = 1;
    ok(i == 1, "int initialization");

    i = -i;
    is(i, -1, "unary minus");

    i = 1;

    is(~i, -2, "bitwise not");

    is(i | 2, 3, "bitwise or");

    is(i ^ 3, 2, "bitwise xor");

    is(i << 2, 4, "shift left");
    i = 8;
    is(i >> 2, 2, "shift right");

    string s = "abc";
    is_string(s[1], "b", "string indexing");

    int j = 12;
    for (i = 0; i < 10; ++i)
        --j;
    is(j, 2, "for loop, inc and dec operators");

    j = 0;
    for (i in [ 1, 3, 5, 7 ])
        j += i;
    is(j, 16, "for in");

    array();

    is_string(Foo.bar(), "Foo.bar", "call function in namespace");
    is_string(bar(), "bar", "call function out of namespace with same name");

    test_switchcase();
}

// End
